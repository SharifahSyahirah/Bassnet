#--==============================================================================
#-- DBMS Name        :    SNOWFLAKE Custom*
#-- Block Name       :    UPDATE_stage_BASSxBNM_xCriticalSpare_10
#-- Template         :    wsl_snowflake_pscript_stage
#-- Template Version :    8.5.1.0
#-- Description      :    Update the Stage Table table stage_BASSxBNM_xCriticalSpare_10
#-- Generated by     :    WhereScape RED Version 8.6.1.2 (build 210415-011050)
#-- Generated for    :    Wilhelmsen Ships Service Malaysia
#-- Generated on     :    Friday, August 01, 2025 at 10:43:50
#-- Author           :    AlvinHee
#--==============================================================================
#-- Notes / History
#--

Import-module -Name WslPowershellCommon -DisableNameChecking
Import-module -Name WslPowershellSnowflake -DisableNameChecking
$tgtConn = New-Object System.Data.Odbc.OdbcConnection
Hide-Window

#--============================================================================
#-- General Variables
#--============================================================================

$sequence = ${env:WSL_SEQUENCE}
$jobName = ${env:WSL_JOB_NAME}
$taskName = ${env:WSL_TASK_NAME}
$jobId = ${env:WSL_JOB_KEY}
$taskId = ${env:WSL_TASK_KEY}
$return_Msg = "stage_BASSxBNM_xCriticalSpare_10 updated."
$status = 1

#--============================================================================
#-- Main
#--============================================================================

$step = 100
[int64]$insertCount = 0



if ( $status -eq 1 ){

  #--============================================================================
  #-- Truncate existing records
  #--============================================================================

  $step = 200

  $sql = @"
  TRUNCATE TABLE [TABLEOWNER].[stage_BASSxBNM_xCriticalSpare_10]
  ;
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed truncating table stage_BASSxBNM_xCriticalSpare_10 step $step" -odbcConn $tgtConn
  $return_Msg = $SnowflakeResult[2]
}


if ( $status -eq 1 ){
  #--============================================================================
  #-- Insert new records
  #--============================================================================

  $step = 300

  $sql = @"
  INSERT INTO [TABLEOWNER].[stage_BASSxBNM_xCriticalSpare_10]
  ( mtrl_criticality_code
  , vslmtrl_criticality
  , description
  , db_id
  , mtrl_item_id
  , distgrp_id
  , category_id
  , mtrl_code
  , mtrl_description
  , mtrlgrp_code
  , mtrlsubgrp_code
  , unit_code
  , address_id
  , account_code
  , mtrl_fleetid
  , mtrl_refid
  , mtrl_model
  , mtrl_maker
  , mtrl_makersno
  , mtrl_drawno
  , mtrl_impaid
  , mtrl_issaid
  , mtrl_issano
  , mtrl_freetext
  , rec_deleted
  , rec_revdbid
  , rec_creator
  , rec_credate
  , rec_revisor
  , rec_revdate
  , rec_repldate
  , mtrl_narcotic
  , mtrl_batch
  , convert_to_comp
  , mtrl_criticality
  , lead_time
  , dispmethod_code
  , cert_no
  , hazardousgood_code
  , harmonized_sys
  , supp_grp
  , alternate_makersno
  , mtrl_remarks1
  , mtrl_remarks2
  , lead_time_type
  , costcenter_code
  , proposed_categoryid
  , mtrlkind_code
  , cert_required
  , mtrl_activate
  , stock_item_flag
  , stock_account_code
  , mtrlstk_stock
  , Vessel_ID
  , Vessel_Name
  , Linked_Component
  , DSS_CREATE_TIME
  , DSS_UPDATE_TIME
  )
  SELECT load_BASS_VESSELMATERIAL.mtrl_criticality_code AS mtrl_criticality_code
       , load_BASS_VESSELMATERIAL.vslmtrl_criticality AS vslmtrl_criticality
       , load_BASSxREGMTRLCRITICALLY.description AS description
       , load_BASS_DISTRIBUTIONACCESS.db_id AS db_id
       , load_BASS_MATERIAL.mtrl_item_id AS mtrl_item_id
       , load_BASS_MATERIAL.distgrp_id AS distgrp_id
       , load_BASS_MATERIAL.category_id AS category_id
       , load_BASS_MATERIAL.mtrl_code AS mtrl_code
       , load_BASS_MATERIAL.mtrl_description AS mtrl_description
       , load_BASS_MATERIAL.mtrlgrp_code AS mtrlgrp_code
       , load_BASS_MATERIAL.mtrlsubgrp_code AS mtrlsubgrp_code
       , load_BASS_MATERIAL.unit_code AS unit_code
       , load_BASS_MATERIAL.address_id AS address_id
       , load_BASS_MATERIAL.account_code AS account_code
       , load_BASS_MATERIAL.mtrl_fleetid AS mtrl_fleetid
       , load_BASS_MATERIAL.mtrl_refid AS mtrl_refid
       , load_BASS_MATERIAL.mtrl_model AS mtrl_model
       , load_BASS_MATERIAL.mtrl_maker AS mtrl_maker
       , load_BASS_MATERIAL.mtrl_makersno AS mtrl_makersno
       , load_BASS_MATERIAL.mtrl_drawno AS mtrl_drawno
       , load_BASS_MATERIAL.mtrl_impaid AS mtrl_impaid
       , load_BASS_MATERIAL.mtrl_issaid AS mtrl_issaid
       , load_BASS_MATERIAL.mtrl_issano AS mtrl_issano
       , load_BASS_MATERIAL.mtrl_freetext AS mtrl_freetext
       , load_BASS_MATERIAL.rec_deleted AS rec_deleted
       , load_BASS_MATERIAL.rec_revdbid AS rec_revdbid
       , load_BASS_MATERIAL.rec_creator AS rec_creator
       , load_BASS_MATERIAL.rec_credate AS rec_credate
       , load_BASS_MATERIAL.rec_revisor AS rec_revisor
       , load_BASS_MATERIAL.rec_revdate AS rec_revdate
       , load_BASS_MATERIAL.rec_repldate AS rec_repldate
       , load_BASS_MATERIAL.mtrl_narcotic AS mtrl_narcotic
       , load_BASS_MATERIAL.mtrl_batch AS mtrl_batch
       , load_BASS_MATERIAL.convert_to_comp AS convert_to_comp
       , load_BASS_MATERIAL.mtrl_criticality AS mtrl_criticality
       , load_BASS_MATERIAL.lead_time AS lead_time
       , load_BASS_MATERIAL.dispmethod_code AS dispmethod_code
       , load_BASS_MATERIAL.cert_no AS cert_no
       , load_BASS_MATERIAL.hazardousgood_code AS hazardousgood_code
       , load_BASS_MATERIAL.harmonized_sys AS harmonized_sys
       , load_BASS_MATERIAL.supp_grp AS supp_grp
       , load_BASS_MATERIAL.alternate_makersno AS alternate_makersno
       , load_BASS_MATERIAL.mtrl_remarks1 AS mtrl_remarks1
       , load_BASS_MATERIAL.mtrl_remarks2 AS mtrl_remarks2
       , load_BASS_MATERIAL.lead_time_type AS lead_time_type
       , load_BASS_MATERIAL.costcenter_code AS costcenter_code
       , load_BASS_MATERIAL.proposed_categoryid AS proposed_categoryid
       , load_BASS_MATERIAL.mtrlkind_code AS mtrlkind_code
       , load_BASS_MATERIAL.cert_required AS cert_required
       , load_BASS_MATERIAL.mtrl_activate AS mtrl_activate
       , load_BASS_MATERIAL.stock_item_flag AS stock_item_flag
       , load_BASS_MATERIAL.stock_account_code AS stock_account_code
       , load_BASS_MTRLSTOCK.mtrlstk_stock AS mtrlstk_stock
       , load_BASS_VESSELMATERIAL.vessel_id AS Vessel_ID
       , load_BASS_VESSEL.vessel_name AS Vessel_Name
       , load_BASSxVESSELCOMPONENTMATERIAL.component_id AS Linked_Component
       , CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS DSS_CREATE_TIME
       , CAST(CURRENT_TIMESTAMP AS TIMESTAMP) AS DSS_UPDATE_TIME
  FROM [TABLEOWNER].[load_BASS_MATERIAL] load_BASS_MATERIAL
  LEFT JOIN [TABLEOWNER].[load_BASSxVESSELCOMPONENTMATERIAL] load_BASSxVESSELCOMPONENTMATERIAL
    ON load_BASS_MATERIAL.mtrl_item_id = load_BASSxVESSELCOMPONENTMATERIAL.mtrl_item_id
    AND load_BASSxVESSELCOMPONENTMATERIAL.CATEGORY_ID = 1210
    AND load_BASSxVESSELCOMPONENTMATERIAL.REC_DELETED = 0
  
  LEFT JOIN [TABLEOWNER].[load_BASS_VESSELMATERIAL] load_BASS_VESSELMATERIAL
    ON load_BASSxVESSELCOMPONENTMATERIAL.vessel_id = load_BASS_VESSELMATERIAL.vessel_id
   AND load_BASS_MATERIAL.mtrl_item_id = load_BASS_VESSELMATERIAL.mtrl_item_id
  LEFT JOIN [TABLEOWNER].[load_BASSxREGMTRLCRITICALLY] load_BASSxREGMTRLCRITICALLY
    ON load_BASS_VESSELMATERIAL.mtrl_criticality_code = load_BASSxREGMTRLCRITICALLY.mtrl_criticality_code
    AND load_BASSxREGMTRLCRITICALLY.REC_DELETED = 0
  LEFT JOIN [TABLEOWNER].[load_BASS_DISTRIBUTIONACCESS] load_BASS_DISTRIBUTIONACCESS
  ON load_BASS_DISTRIBUTIONACCESS.DISTGRP_ID = load_BASS_MATERIAL.DISTGRP_ID
  LEFT JOIN [TABLEOWNER].[load_BASS_MTRLSTOCK] load_BASS_MTRLSTOCK
  ON load_BASS_MTRLSTOCK.MTRL_ITEM_ID = load_BASS_MATERIAL.MTRL_ITEM_ID 
  and load_BASS_MTRLSTOCK.VESSEL_ID = load_BASSxVESSELCOMPONENTMATERIAL.VESSEL_ID
  and load_BASS_MTRLSTOCK.REC_DELETED = 0

  left join [TABLEOWNER].[load_BASS_VESSEL] load_BASS_VESSEL
  on load_bass_VESSEL.vessel_id=load_BASS_VESSELMATERIAL.vessel_id
  and load_bass_vessel.rec_deleted=0

  WHERE 
      load_BASS_MATERIAL.REC_DELETED = 0
      AND load_BASS_MATERIAL.CATEGORY_ID = 1210
      AND load_BASS_MATERIAL.DISTGRP_ID IN (
          SELECT DISTINCT DISTGRP_ID
          FROM load_BASS_DISTRIBUTION
          WHERE REC_DELETED = 0
          AND DISTGRP_ID IN (
              SELECT DISTGRP_ID
              FROM load_BASS_DISTRIBUTIONACCESS
              WHERE load_BASS_DISTRIBUTIONACCESS.REC_DELETED = 0  
              AND load_BASS_DISTRIBUTIONACCESS.ACCESS_MODE > 0    
          )
      )
  
 
      AND load_BASS_VESSELMATERIAL.MTRL_CRITICALITY_CODE IS NOT NULL;
  ;
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed insert into table stage_BASSxBNM_xCriticalSpare_10 step $step" -odbcConn $tgtConn
  $insertCount = $insertCount + $SnowflakeResult[1]
  $return_Msg = $SnowflakeResult[2]
}



#--=====================================================
#-- All Done report the results
#--=====================================================

$step = 400

#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log
$metaResult = WsWrkTask -Replaced $insertCount
if ( $metaResult -lt -1 ){
  $status = -2
  $return_Msg = "Failure executing WsWrkTask. $insertCount records inserted."
}

#-- Work out return message
if ( $status -eq 1 ) {

  $return_Msg = "stage_BASSxBNM_xCriticalSpare_10 updated.  "
  $return_Msg += "$insertCount records inserted.  "
}

$status
$return_Msg

$tgtConn.Dispose()
